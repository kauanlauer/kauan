function doGet(e) {
    return ManageSheet(e);
}
function doPost(e) {
    return ManageSheet(e);
}

function ManageSheet(e) {

    // Permite solicitações CORS
    const output = HtmlService.createHtmlOutput().setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    // Adiciona cabeçalhos CORS
    output.addMetaTag('viewport', 'width=device-width, initial-scale=1');
    output.append('<meta http-equiv="Access-Control-Allow-Origin" content="*">');


    // Substitua pelo ID real da sua planilha
    const spreadsheetId = e.parameter.spreadsheetId;

    // Obtenha a planilha usando o ID
    const planilha = SpreadsheetApp.openById(spreadsheetId);

    // Verifique se a planilha foi encontrada
    if (!planilha) {
        console.error("Planilha não encontrada com o ID especificado.");
        return;
    }
    // Obtenha a primeira folha da planilha
    const sheet = planilha.getSheets()[0];

    // Verifique se a planilha contém pelo menos uma folha
    if (!sheet) {
        console.error("Nenhuma folha encontrada na planilha.");
        return;
    }
    //cria uma nova linha
    if (e.parameter.func == "Create") {
        const existingData = sheet.getDataRange().getValues();
        const newId = existingData.length + 1;
        
        const valoresDivididos = e.parameter.values.split(",");
        const valoresCorrigidos = valoresDivididos.map(valor => valor.replace(/\|/g, ","));
        const novosValores = [newId, ...valoresCorrigidos];
        
        // Transforma o array unidimensional em uma matriz bidimensional
        const matrizBidimensional = [novosValores];
        
        // Adiciona os novos valores à planilha
        sheet.getRange(sheet.getLastRow() + 1, 1, matrizBidimensional.length, matrizBidimensional[0].length).setValues(matrizBidimensional);
        
        const jsonData = JSON.stringify("Linha adicionada com sucesso");
        return ContentService.createTextOutput(jsonData).setMimeType(ContentService.MimeType.JSON);
    }


    //atualiza uma linha
    // Atualiza uma linha com base no ID
    if (e.parameter.func == "Update") {
        const idToFind = e.parameter.row; // Valor do ID a ser procurado
        const idColumnIndex = 1; // Índice da coluna onde os IDs estão localizados
        const dataRange = sheet.getDataRange();
        const dataValues = dataRange.getValues();
    
        // Procura a linha com base no ID
        let rowIndexToUpdate = -1;
        for (let i = 0; i < dataValues.length; i++) {
            if (dataValues[i][idColumnIndex - 1] == idToFind) {
                rowIndexToUpdate = i + 1; // Adiciona 1 porque os índices de linha começam em 1
                break;
            }
        }
    
        if (rowIndexToUpdate !== -1) {
            // Se encontrou a linha, atualiza os valores
            const valoresDivididos = e.parameter.values.split(",");
            
            // Substitui "|" por "," em cada item do array
            const novosValores = valoresDivididos.map(valor => valor.replace(/\|/g, ","));
            
            const valoresAtuais = dataValues[rowIndexToUpdate - 1];
    
            // Atualiza os valores, pulando a primeira coluna (índice 0)
            for (let i = 1; i < valoresAtuais.length; i++) {
                valoresAtuais[i] = novosValores[i - 1];
            }
    
            // Atualiza a planilha com os novos valores
            sheet.getRange(rowIndexToUpdate, 1, 1, valoresAtuais.length).setValues([valoresAtuais]);
    
            jsonData = JSON.stringify("Linha atualizada com sucesso");
        } else {
            jsonData = JSON.stringify("ID não encontrado");
        }
    
        return ContentService.createTextOutput(jsonData).setMimeType(ContentService.MimeType.JSON);
    }
    


    //deleta uma linha

    if (e.parameter.func == "Delete") {
        const idParaDeletar = e.parameter.id; // O valor do ID que você deseja excluir

        // Obter os dados da planilha
        const data = sheet.getDataRange().getValues();

        // Encontrar a linha correspondente ao ID
        const rowIndexToDelete = data.findIndex(row => row[0] == idParaDeletar);

        if (rowIndexToDelete !== -1) {
            // Se encontrou a linha, delete-a
            sheet.deleteRow(rowIndexToDelete + 1); // +1 porque os índices do array começam em 0, mas as linhas na planilha começam em 1
            jsonData = JSON.stringify("Linha deletada com sucesso");
        } else {
            jsonData = JSON.stringify("ID não encontrado. Nenhuma linha deletada.");
        }

        return ContentService.createTextOutput(jsonData).setMimeType(ContentService.MimeType.JSON);
    }
    //obtem os dados da planilha

    if (e.parameter.func == "Read") {

        const data = sheet.getDataRange().getValues();
        const jsonData = JSON.stringify(data);
        return ContentService.createTextOutput(jsonData).setMimeType(ContentService.MimeType.JSON);
    }

    if (e.parameter.func == "search") {
        const data = sheet.getDataRange().getValues();
        const jsonData = JSON.stringify(filterData(data, e.parameter.columnName, e.parameter.condition));
        return ContentService.createTextOutput(jsonData).setMimeType(ContentService.MimeType.JSON);
    }

    function filterData(data, columnName, condition) {
        // Obtém o índice da coluna
        const columnIndex = data[0].indexOf(columnName);

        // Filtra os dados com base na condição
        const filteredData = data.filter(row => row[columnIndex] == condition);

        return filteredData;
    }

}